{"version":3,"sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","success","message","description","handleChange","event","persist","newValues","target","name","value","newErrors","handleSubmit","preventDefault","axios","post","then","email","test","Content","styled","Container","TextWrapper","withTranslation","title","content","t","ContactContainer","id","justify","align","lg","md","sm","xs","direction","style","fontSize","fontWeight"],"mappings":"wNAIaA,EAAU,SAACC,GACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAyBAC,qBAAU,WAC2B,IAA/BC,OAAOC,KAAKN,GAAQO,QAAgBL,IACtCH,EAAU,IAxBZS,IAAaC,QAAQ,CACnBC,QAAS,UACTC,YAAa,mCAyBd,CAACX,EAAQE,IAWZ,MAAO,CACLU,aAVmB,SAACC,GACpBA,EAAMC,UACNf,GAAU,SAAAgB,GAAS,kCACdA,GADc,kBAEhBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,WAEpCjB,GAAU,SAAAkB,GAAS,kCAAUA,GAAV,kBAAsBN,EAAMG,OAAOC,KAAO,SAK7DG,aAlCmB,SAACP,GACpBA,EAAMQ,iBACNpB,EAAUL,EAASE,IAGgB,IAA/BO,OAAOC,KAAKR,GAAQS,QACtBe,IACGC,KAHO,GAEV,eAEOzB,IAEJ0B,MAAK,WACJrB,GAAgB,OAwBtBL,SACAE,WClDW,SAASJ,EAASE,GAC/B,IAAME,EAAS,GAaf,OAXKF,EAAOmB,OACVjB,EAAOiB,KAAO,oBAEXnB,EAAO2B,MAEA,eAAeC,KAAK5B,EAAO2B,SACrCzB,EAAOyB,MAAQ,4BAFfzB,EAAOyB,MAAQ,4BAIZ3B,EAAOY,UACVV,EAAOU,QAAU,uBAEZV,E,gCCdI2B,EAAUC,YAAO,IAAPA,CAAH,mDAIPC,EAAYD,YAAO,MAAPA,CAAH,wEAKTE,EAAcF,YAAO,MAAPA,CAAH,yE,OCSTG,iBAXD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,EAC/B,OACE,eAACL,EAAD,WACE,6BAAKK,EAAEF,KACP,cAACF,EAAD,UACE,cAACH,EAAD,UAAUO,EAAED,aCZPE,EAAmBP,YAAO,MAAPA,CAAH,6HAQJA,YAAO,OAAPA,CAAH,qKAUFA,YAAO,OAAPA,CAAH,6IAQcA,YAAO,MAAPA,CAAH,wJCqBbG,yBArCC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,QAASG,EAA0B,EAA1BA,GACjC,GAD2D,EAAtBF,EACkBvC,EACrDC,IADF,EAAQE,OAAR,EAAgBE,OAAhB,EAAwBY,aAAxB,EAAsCQ,aAatC,OACE,cAACe,EAAD,CAAkBC,GAAIA,EAAtB,SACE,eAAC,IAAD,CAAKC,QAAQ,gBAAgBC,MAAM,SAAnC,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,SACE,cAAC,IAAD,CAAOC,UAAU,OAAjB,SACE,cAAC,EAAD,CAAOX,MAAOA,EAAOC,QAASA,QAGlC,cAAC,IAAD,CAAKM,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,SACE,eAAC,IAAD,CAAOC,UAAU,QAAjB,UACE,mBAAGC,MAAO,CAAEC,SAAU,OAAQC,WAAY,QAA1C,sDAGA,mBAAGF,MAAO,CAAEC,SAAU,OAAQC,WAAY,QAA1C","file":"static/js/11.18a3dd09.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { notification } from 'antd';\nimport axios from 'axios';\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification.success({\n      message: 'Success',\n      description: 'Your message has been sent!',\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = '';\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues('');\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues(newValues => ({\n      ...newValues,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors(newErrors => ({ ...newErrors, [event.target.name]: '' }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from '../types';\n\nexport default function validate(values: validateProps) {\n  const errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = 'Name is required';\n  }\n  if (!values.email) {\n    errors.email = 'Email address is required';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid';\n  }\n  if (!values.message) {\n    errors.message = 'Message is required';\n  }\n  return errors;\n}\n","import styled from 'styled-components';\n\nexport const Content = styled('p')`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled('div')`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled('div')`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from 'react-i18next';\nimport { Container, TextWrapper, Content } from './styles';\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled('div')`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled('form')`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled('span')<any>`\n  display: block;\n  font-weight: 600;\n  color: rgb(24, 33, 109);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled('div')`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from 'antd';\nimport { withTranslation } from 'react-i18next';\nimport { Slide, Zoom } from 'react-awesome-reveal';\nimport { ContactProps, ValidationTypeProps } from './types';\nimport { useForm } from '../../common/utils/useForm';\nimport validate from '../../common/utils/validationRules';\nimport { Button } from '../../common/Button';\nimport Block from '../Block';\nimport Input from '../../common/Input';\nimport TextArea from '../../common/TextArea';\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from './styles';\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate,\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction=\"left\">\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\">\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\">\n            <p style={{ fontSize: '24px', fontWeight: 'bold' }}>\n              Escola | (11) 2658-8012 / (11) 2658-8011\n            </p>\n            <p style={{ fontSize: '24px', fontWeight: 'bold' }}>\n              Sugest√µes | (11) 96494-5942\n            </p>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"sourceRoot":""}